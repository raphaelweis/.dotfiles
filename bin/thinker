#!/usr/bin/env bash

ZOOKEEPER_STARTUP_TIMEOUT=20
KAFKA_STARTUP_TIMEOUT=10

sessionName="Thinker"
baseDir="$HOME/D/Thinker-App"
mHome="$baseDir/Mobile"
kfkHome="$HOME/D/kafka38"
kasHome="$baseDir/Keycloak-Auth-Service"
usHome="$baseDir/User-Service"
esHome="$baseDir/Embedding-Service"
qsHome="$baseDir/Quiz-Service"
fsHome="$baseDir/Feed-Service"

mWin="M"
kfkWin="KFK"
kasWin="KAS"
usWin="US"
esWin="ES"
qsWin="QS"
fsWin="FS"

# Check if the session already exists, if it does attach and exit.
tmux has-session -t $sessionName 2>/dev/null
if [ $? = 0 ]; then
  echo "Session $sessionName already exists. Attaching..."
  tmux switch-client -t $sessionName || tmux attach-session -t $sessionName
  exit 0
fi

# Create a new session
# Create an editor window and a process window for Mobile.
# - (E) means editor
# - (P) means process
tmux new-session -d -s $sessionName -n "$mWin (E)" -c $mHome
tmux new-window -t $sessionName -n "$mWin (P)" -c $mHome
tmux split-window -h -t $sessionName:"$mWin (P)".0 -c $mHome
tmux split-window -v -t $sessionName:"$mWin (P)".1 -c $mHome
tmux send-keys -t $sessionName:"$mWin (E)" "nvim" C-m

# Create the Kafka window with 2 panes. Start zookeeper and kafka server.
# We wait 20 seconds before starting the server to ensure zookeeper has had the time to start up.
tmux new-window -t $sessionName -n "$kfkWin (P)" -c $kfkHome
tmux split-window -v -t $sessionName:$kfkWin -c $kfkHome
tmux send-keys -t $sessionName:"$kfkWin (P)".0 "bin/zookeeper-server-start.sh config/zookeeper.properties" C-m
tmux send-keys -t $sessionName:"$kfkWin (P)".1 "sleep $ZOOKEEPER_STARTUP_TIMEOUT && bin/kafka-server-start.sh config/server.properties" C-m

# Pause the script and wait for kafka to properly start.
echo "------------------------------"
echo "Thinker backend startup script"
echo "------------------------------"
echo
echo "Waiting $((ZOOKEEPER_STARTUP_TIMEOUT + KAFKA_STARTUP_TIMEOUT)) seconds for zookeeper and kafka to boot up..."

sleep $((ZOOKEEPER_STARTUP_TIMEOUT + KAFKA_STARTUP_TIMEOUT))

# Create a Keycloak editor and process window and start the keycloak server.
tmux new-window -t $sessionName -n "$kasWin (E)" -c $kasHome
tmux new-window -t $sessionName -n "$kasWin (P)" -c $kasHome
tmux send-keys -t $sessionName:"$kasWin (P)" "docker compose up" C-m

# Create a User-Service editor and process window and start:
# - The minIO server
# - The User-Service
# - The user activity comsumer script
tmux new-window -t $sessionName -n "$usWin (E)" -c $usHome
tmux new-window -t $sessionName -n "$usWin (P)" -c $usHome
tmux split-window -v -t $sessionName:"$usWin (P)" -c $usHome
tmux split-window -v -t $sessionName:"$usWin (P)" -c $usHome
tmux select-layout -t $sessionName:"$usWin (P)" even-vertical
tmux send-keys -t $sessionName:"$usWin (P)".0 "source ./venv/bin/activate && python -m app.main" C-m
tmux send-keys -t $sessionName:"$usWin (P)".1 "docker compose up" C-m
tmux send-keys -t $sessionName:"$usWin (P)".2 "source ./venv/bin/activate && python batch/user_activity_consumer.py" C-m

# Create a Embedding-Service editor and process window and start:
# - The qdrant server
# - The Embedding-Service
# - The scheduler batch script
tmux new-window -t $sessionName -n "$esWin (E)" -c $esHome
tmux new-window -t $sessionName -n "$esWin (P)" -c $esHome
tmux split-window -v -t $sessionName:"$esWin (P)" -c $esHome
tmux split-window -v -t $sessionName:"$esWin (P)" -c $esHome
tmux select-layout -t $sessionName:"$esWin (P)" even-vertical
tmux send-keys -t $sessionName:"$esWin (P)".0 "source ./venv/bin/activate && python -m app.main" C-m
tmux send-keys -t $sessionName:"$esWin (P)".1 "docker compose up" C-m
tmux send-keys -t $sessionName:"$esWin (P)".2 "source ./venv/bin/activate && python -m batch.scheduler" C-m

# Create a Quiz-Service editor and process and start:
# - The Quiz-Service
# - The like_processor batch script
# - The scheduler batch script
# - The view_processor_cache batch script
# - The view_processor_db script
tmux new-window -t $sessionName -n "$qsWin (E)" -c $qsHome
tmux new-window -t $sessionName -n "$qsWin (P)" -c $qsHome
tmux split-window -v -t $sessionName:"$qsWin (P)" -c $qsHome
tmux split-window -v -t $sessionName:"$qsWin (P)" -c $qsHome
tmux split-window -h -t $sessionName:"$qsWin (P)".1 -c $qsHome
tmux split-window -h -t $sessionName:"$qsWin (P)".3 -c $qsHome
tmux send-keys -t $sessionName:"$qsWin (P)".0 "source ./venv/bin/activate && python -m app.main" C-m
tmux send-keys -t $sessionName:"$qsWin (P)".1 "source ./venv/bin/activate && python batch/like_processor.py" C-m
tmux send-keys -t $sessionName:"$qsWin (P)".2 "source ./venv/bin/activate && python batch/scheduler.py" C-m
tmux send-keys -t $sessionName:"$qsWin (P)".3 "source ./venv/bin/activate && python batch/view_processor_cache.py" C-m
tmux send-keys -t $sessionName:"$qsWin (P)".4 "source ./venv/bin/activate && python batch/view_processor_db.py" C-m

# Create a Feed-Service editor and process window and start:
# - The Feed-Service
# - The user_activity_consumer batch script
# - The scheduler batch script
tmux new-window -t $sessionName -n "$fsWin (E)" -c $fsHome
tmux new-window -t $sessionName -n "$fsWin (P)" -c $fsHome
tmux split-window -v -t $sessionName:"$fsWin (P)" -c $fsHome
tmux split-window -v -t $sessionName:"$fsWin (P)" -c $fsHome
tmux select-layout -t $sessionName:"$fsWin (P)" even-vertical
tmux send-keys -t $sessionName:"$fsWin (P)".0 "source ./venv/bin/activate && python -m app.main" C-m
tmux send-keys -t $sessionName:"$fsWin (P)".1 "source ./venv/bin/activate && python batch/user_activity_consumer.py" C-m
tmux send-keys -t $sessionName:"$fsWin (P)".2 "source ./venv/bin/activate && python batch/scheduler.py" C-m

# Switch to the editor for the Mobile window.
tmux select-window -t $sessionName:"$mWin (E)"

# Switch to the session
tmux switch-client -t $sessionName || tmux attach-session -t $sessionName
